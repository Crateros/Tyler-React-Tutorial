1. Implicit Binding
2. Explicit Binding
3. new Binding
4. window Binding

//Consider where function is invoked

var sayName = function(name) {
  console.log('Hello ' + name);
};

//we don't know what name is until the function using it gets invoked
sayName('Donnie');

//Implicit Binding
//Left of the Dot at call time
var me = {
  name: 'Donnie Dumb',
  age: 25,
  sayName: function() {
    console.log(this.name);
  }
};

//Implicit binding says look to left of the Dot, that is what 'this' is referencing
me.sayName();




ar sayNameMixin = function(obj) {
  obj.sayName = function() {
    console.log(this.name);
  };
};

var me = {
  name: 'Donnie',
  age: 31
};

var you = {
  name: 'Talia',
  age: 24
};

sayNameMixin(me);
sayNameMixin(you);
me.sayName();
you.sayName();

var Person = function(name, age) {
  return {
    name: name,
    age: age,
    sayName: function() {
      console.log(this.name);
    },
    sayAge: function() {
      console.log(this.age);
    },
    mother: {
      name: 'Cheri',
      sayName: function() {
        console.log(this.name);
      }
    }
  };
};

var Donnie = Person('Donnie', 30);
Donnie.sayName();
Donnie.sayAge();
Donnie.mother.sayName();


---------------------------------------------------------------------
Explicit Binding
call , apply , bind

call = pass in arguments 1 by 1
apply = pass in array of arguments
bind = call bound to a different function

var sayName = function() {
  console.log('Name: ', this.name);
};

var donnie = {
  name: 'Donnie',
  age: 30
};

sayName.call(donnie);

passing in donnie to the function explicitly sets 'this' state to donnie variable



var sayName = function(lang1, lang2) {
  console.log('Name: ', this.name + ' and I program in ' + lang1 + ' and ' + lang2);
};

var donnie = {
  name: 'Donnie',
  age: 30
};

var languages = ['JavaScript', 'ES6', 'Python'];

sayName.call(donnie, languages[0], languages[2]);

-Here we are invoking sayName with respect to donnie, that sets the state of 'this',
then we pass arguments from languages array.

However doing langauges[0] , [1] is pain in the ass, automatically parse them out
using .apply

sayName.apply(donnie, languages);


bind allows us to bind the function call to another function and capture the
state for later. Doesnt immediately invoke function, instead calls it later.

var newFunction = sayName.bind(donnie, languages[0], languages[2]);

console.log("Now I am here");

newFunction();

------------------------------------------------------------------------------------
new Binding

// new Binding, new keyword causes 'this' inside function to be bound to the object being constructed
var Animal = function(color, name, type) {
  //this = {} gets created when 'new' keyword is used
  this.color = color;
  this.name = name;
  this.type = type;
};

var zebra = new Animal('black and white', 'Zorro', 'Zebra');
console.log(this.zebra.name, this.zebra.type);

----------------------------------------------------------------------------------
window Binding

var sayAge = function() {
  console.log(this.age);
};

var me = {
  age: 25
};

//This keyword will default to window object
sayAge(); <--------- undefined
window.age = 35;
sayAge(); <------------- 35
